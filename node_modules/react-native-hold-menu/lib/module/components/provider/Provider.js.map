{"version":3,"sources":["Provider.tsx"],"names":["React","memo","useEffect","useMemo","PortalProvider","Animated","useSharedValue","GestureHandlerRootView","Backdrop","InternalContext","CONTEXT_MENU_STATE","Menu","AnimatedIcon","ProviderComponent","children","theme","selectedTheme","iconComponent","paddingBottom","createAnimatedComponent","state","UNDETERMINED","menuProps","itemHeight","itemWidth","itemX","itemY","items","anchorPosition","menuHeight","transformValue","actionParams","value","internalContextVariables","flex","Provider"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,SAAtB,EAAiCC,OAAjC,QAAgD,OAAhD;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,OAAOC,QAAP,IAAmBC,cAAnB,QAAyC,yBAAzC;AACA,SAASC,sBAAT,QAAuC,8BAAvC,C,CAEA;;AACA,SAASC,QAAT,QAAyB,aAAzB,C,CAEA;;AACA,SAASC,eAAT,QAAgC,wBAAhC;AAGA,SAASC,kBAAT,QAAmC,iBAAnC;AAEA,OAAOC,IAAP,MAAiB,SAAjB;AAOA,OAAO,IAAIC,YAAJ;;AAEP,MAAMC,iBAAiB,GAAG,CAAC;AACzBC,EAAAA,QADyB;AAEzBC,EAAAA,KAAK,EAAEC,aAFkB;AAGzBC,EAAAA,aAHyB;AAIzBC,EAAAA;AAJyB,CAAD,KAKG;AAC3B,MAAID,aAAJ,EACEL,YAAY,GAAGP,QAAQ,CAACc,uBAAT,CAAiCF,aAAjC,CAAf;AAEF,QAAMG,KAAK,GAAGd,cAAc,CAC1BI,kBAAkB,CAACW,YADO,CAA5B;AAGA,QAAMN,KAAK,GAAGT,cAAc,CAAmBU,aAAa,IAAI,OAApC,CAA5B;AACA,QAAMM,SAAS,GAAGhB,cAAc,CAAoB;AAClDiB,IAAAA,UAAU,EAAE,CADsC;AAElDC,IAAAA,SAAS,EAAE,CAFuC;AAGlDC,IAAAA,KAAK,EAAE,CAH2C;AAIlDC,IAAAA,KAAK,EAAE,CAJ2C;AAKlDC,IAAAA,KAAK,EAAE,EAL2C;AAMlDC,IAAAA,cAAc,EAAE,YANkC;AAOlDC,IAAAA,UAAU,EAAE,CAPsC;AAQlDC,IAAAA,cAAc,EAAE,CARkC;AASlDC,IAAAA,YAAY,EAAE;AAToC,GAApB,CAAhC;AAYA7B,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,KAAK,CAACiB,KAAN,GAAchB,aAAa,IAAI,OAA/B,CADc,CAEd;AACD,GAHQ,EAGN,CAACA,aAAD,CAHM,CAAT;AAKA,QAAMiB,wBAAwB,GAAG9B,OAAO,CACtC,OAAO;AACLiB,IAAAA,KADK;AAELL,IAAAA,KAFK;AAGLO,IAAAA,SAHK;AAILJ,IAAAA,aAAa,EAAEA,aAAa,IAAI;AAJ3B,GAAP,CADsC,EAOtC,CAACE,KAAD,EAAQL,KAAR,EAAeO,SAAf,EAA0BJ,aAA1B,CAPsC,CAAxC;AAUA,sBACE,oBAAC,sBAAD;AAAwB,IAAA,KAAK,EAAE;AAAEgB,MAAAA,IAAI,EAAE;AAAR;AAA/B,kBACE,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAED;AAAjC,kBACE,oBAAC,cAAD,QACGnB,QADH,eAEE,oBAAC,QAAD,OAFF,eAGE,oBAAC,IAAD,OAHF,CADF,CADF,CADF;AAWD,CAnDD;;AAqDA,MAAMqB,QAAQ,gBAAGlC,IAAI,CAACY,iBAAD,CAArB;AAEA,eAAesB,QAAf","sourcesContent":["import React, { memo, useEffect, useMemo } from 'react';\nimport { PortalProvider } from '@gorhom/portal';\nimport Animated, { useSharedValue } from 'react-native-reanimated';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\n\n// Components\nimport { Backdrop } from '../backdrop';\n\n// Utils\nimport { InternalContext } from '../../context/internal';\nimport { HoldMenuProviderProps } from './types';\nimport { StateProps, Action } from './reducer';\nimport { CONTEXT_MENU_STATE } from '../../constants';\nimport { MenuInternalProps } from '../menu/types';\nimport Menu from '../menu';\n\nexport interface Store {\n  state: StateProps;\n  dispatch?: React.Dispatch<Action>;\n}\n\nexport let AnimatedIcon: any;\n\nconst ProviderComponent = ({\n  children,\n  theme: selectedTheme,\n  iconComponent,\n  paddingBottom,\n}: HoldMenuProviderProps) => {\n  if (iconComponent)\n    AnimatedIcon = Animated.createAnimatedComponent(iconComponent);\n\n  const state = useSharedValue<CONTEXT_MENU_STATE>(\n    CONTEXT_MENU_STATE.UNDETERMINED\n  );\n  const theme = useSharedValue<'light' | 'dark'>(selectedTheme || 'light');\n  const menuProps = useSharedValue<MenuInternalProps>({\n    itemHeight: 0,\n    itemWidth: 0,\n    itemX: 0,\n    itemY: 0,\n    items: [],\n    anchorPosition: 'top-center',\n    menuHeight: 0,\n    transformValue: 0,\n    actionParams: {},\n  });\n\n  useEffect(() => {\n    theme.value = selectedTheme || 'light';\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedTheme]);\n\n  const internalContextVariables = useMemo(\n    () => ({\n      state,\n      theme,\n      menuProps,\n      paddingBottom: paddingBottom || 0,\n    }),\n    [state, theme, menuProps, paddingBottom]\n  );\n\n  return (\n    <GestureHandlerRootView style={{ flex: 1 }}>\n      <InternalContext.Provider value={internalContextVariables}>\n        <PortalProvider>\n          {children}\n          <Backdrop />\n          <Menu />\n        </PortalProvider>\n      </InternalContext.Provider>\n    </GestureHandlerRootView>\n  );\n};\n\nconst Provider = memo(ProviderComponent);\n\nexport default Provider;\n"]}