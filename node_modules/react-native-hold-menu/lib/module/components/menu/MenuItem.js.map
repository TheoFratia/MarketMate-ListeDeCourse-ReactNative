{"version":3,"sources":["MenuItem.tsx"],"names":["React","useCallback","TouchableOpacity","Animated","useAnimatedStyle","Separator","styles","useInternal","CONTEXT_MENU_STATE","BORDER_LIGHT_COLOR","BORDER_DARK_COLOR","isEqual","getColor","AnimatedIcon","AnimatedTouchable","createAnimatedComponent","MenuItemComponent","item","isLast","state","theme","menuProps","borderStyles","borderBottomColor","value","borderBottomWidth","textColor","color","isTitle","isDestructive","handleOnPress","params","actionParams","text","onPress","END","menuItem","menuItemTitleText","menuItemText","icon","withSeparator","MenuItem","memo"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react';\nimport { TouchableOpacity } from 'react-native';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\n\nimport Separator from './Separator';\nimport styles from './styles';\n\nimport { MenuItemProps } from './types';\nimport { useInternal } from '../../hooks';\nimport { CONTEXT_MENU_STATE } from '../../constants';\nimport { BORDER_LIGHT_COLOR, BORDER_DARK_COLOR } from './constants';\nimport isEqual from 'lodash.isequal';\nimport { getColor } from './calculations';\nimport { AnimatedIcon } from '../provider/Provider';\n\n// @ts-ignore\nconst AnimatedTouchable = Animated.createAnimatedComponent(TouchableOpacity);\n\ntype MenuItemComponentProps = {\n  item: MenuItemProps;\n  isLast?: boolean;\n};\n\nconst MenuItemComponent = ({ item, isLast }: MenuItemComponentProps) => {\n  const { state, theme, menuProps } = useInternal();\n\n  const borderStyles = useAnimatedStyle(() => {\n    const borderBottomColor =\n      theme.value === 'dark' ? BORDER_DARK_COLOR : BORDER_LIGHT_COLOR;\n\n    return {\n      borderBottomColor,\n      borderBottomWidth: isLast ? 0 : 1,\n    };\n  }, [theme, isLast, item]);\n\n  const textColor = useAnimatedStyle(() => {\n    return { color: getColor(item.isTitle, item.isDestructive, theme.value) };\n  }, [theme, item]);\n\n  const handleOnPress = useCallback(() => {\n    if (!item.isTitle) {\n      const params = menuProps.value.actionParams[item.text] || [];\n      if (item.onPress) item.onPress(...params);\n      state.value = CONTEXT_MENU_STATE.END;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state, item]);\n\n  return (\n    <>\n      <AnimatedTouchable\n        onPress={handleOnPress}\n        activeOpacity={!item.isTitle ? 0.4 : 1}\n        style={[styles.menuItem, borderStyles]}\n      >\n        <Animated.Text\n          style={[\n            item.isTitle ? styles.menuItemTitleText : styles.menuItemText,\n            textColor,\n          ]}\n        >\n          {item.text}\n        </Animated.Text>\n        {!item.isTitle &&\n          item.icon &&\n          AnimatedIcon &&\n          (typeof item.icon === 'string' ? (\n            <AnimatedIcon name={item.icon} size={18} style={textColor} />\n          ) : (\n            item.icon()\n          ))}\n      </AnimatedTouchable>\n      {item.withSeparator && <Separator />}\n    </>\n  );\n};\n\nconst MenuItem = React.memo(MenuItemComponent, isEqual);\nexport default MenuItem;\n"]}